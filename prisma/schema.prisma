generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  clerkId          String           @unique
  email            String           @unique
  name             String?
  firstName        String?
  lastName         String?
  role             String           @default("CLIENT")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  formSubmissions  FormSubmission[]
  assignedServices Service[]
  serviceRequests  ServiceRequest[]
  clientProfile    ClientProfile?
}

model ServiceTemplate {
  id            String         @id @default(cuid())
  name          String
  description   String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  milestones    Milestone[]
  services      Service[]
  tasks         Task[]
  requiredForms FormTemplate[] @relation("FormTemplateToServiceTemplate")
}

model Task {
  id           String          @id @default(cuid())
  title        String
  description  String?
  order        Int
  templateId   String
  serviceTasks ServiceTask[]
  template     ServiceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Milestone {
  id                String             @id @default(cuid())
  title             String
  description       String?
  order             Int
  templateId        String
  template          ServiceTemplate    @relation(fields: [templateId], references: [id], onDelete: Cascade)
  serviceMilestones ServiceMilestone[]
}

model Service {
  id          String             @id @default(cuid())
  name        String
  description String?
  status      String             @default("ACTIVE")
  templateId  String
  clientId    String
  startDate   DateTime           @default(now())
  endDate     DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  forms       AssignedForm[]
  client      User               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  template    ServiceTemplate    @relation(fields: [templateId], references: [id])
  milestones  ServiceMilestone[]
  requests    ServiceRequest[]
  tasks       ServiceTask[]
}

model ServiceTask {
  id          String    @id @default(cuid())
  serviceId   String
  taskId      String
  status      String    @default("PENDING")
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  task        Task      @relation(fields: [taskId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model ServiceMilestone {
  id          String    @id @default(cuid())
  serviceId   String
  milestoneId String
  achieved    Boolean   @default(false)
  achievedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  milestone   Milestone @relation(fields: [milestoneId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model ServiceRequest {
  id          String    @id @default(cuid())
  title       String
  description String
  status      String    @default("OPEN")
  priority    String    @default("MEDIUM")
  serviceId   String?
  clientId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resolvedAt  DateTime?
  client      User      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service     Service?  @relation(fields: [serviceId], references: [id])
}

model FormTemplate {
  id               String            @id @default(cuid())
  name             String
  description      String?
  fields           Json
  isTemplate       Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  assignedForms    AssignedForm[]
  submissions      FormSubmission[]
  serviceTemplates ServiceTemplate[] @relation("FormTemplateToServiceTemplate")
}

model AssignedForm {
  id        String       @id @default(cuid())
  formId    String
  serviceId String
  dueDate   DateTime?
  required  Boolean      @default(false)
  createdAt DateTime     @default(now())
  service   Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  form      FormTemplate @relation(fields: [formId], references: [id])

  @@unique([formId, serviceId])
}

model FormSubmission {
  id          String       @id @default(cuid())
  formId      String
  userId      String
  data        Json
  submittedAt DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  form        FormTemplate @relation(fields: [formId], references: [id])
}

model ClientProfile {
  id                  String               @id @default(cuid())
  userId              String               @unique
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName        String?
  phoneNumber         String?
  workHours           String?
  logoUrl             String?
  customFont          String?
  brandColor1         String?
  brandColor2         String?
  brandColor3         String?
  brandColor4         String?
  socialMediaProfiles SocialMediaProfile[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model SocialMediaProfile {
  id              String        @id @default(cuid())
  profileId       String
  profile         ClientProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  platform        String // e.g., 'Twitter', 'LinkedIn'
  url             String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
